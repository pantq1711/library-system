// library-fe/src/components/BorrowBook.js

import React, { useState, useEffect } from "react";
import io from "socket.io-client";

// K·∫øt n·ªëi Socket.IO
const socket = io("http://localhost:3000"); // ‚úÖ ƒê·ªïi v·ªÅ port 3000

const BorrowBook = () => {
  const [userCard, setUserCard] = useState(null);
  const [borrowedBooks, setBorrowedBooks] = useState([]);
  const [message, setMessage] = useState("");

  // ‚úÖ Socket.IO Connection Check
  useEffect(() => {
    socket.on("connect", () => {
      console.log("‚úÖ Socket connected:", socket.id);
    });

    socket.on("disconnect", () => {
      console.log("‚ùå Socket disconnected");
    });

    return () => {
      socket.off("connect");
      socket.off("disconnect");
    };
  }, []);

  // ‚úÖ Listen cho RFID user card scan
  useEffect(() => {
    const handleRfidScanned = (data) => {
      console.log("üìß RFID ƒë∆∞·ª£c qu√©t:", data);
      setUserCard(data);
      setMessage(`Xin ch√†o ${data.user?.name}! H√£y qu√©t s√°ch b·∫°n mu·ªën m∆∞·ª£n.`);
    };

    socket.on("rfid_scanned", handleRfidScanned);

    return () => {
      socket.off("rfid_scanned", handleRfidScanned);
    };
  }, []);

  // ‚úÖ FIX: Listen cho book scan - X·ª¨ L√ù DATA ƒê√öNG
  useEffect(() => {
    if (!userCard?.user?.id) return;

    const handleBookScanned = async (data) => {
      try {
        console.log("üìö S√°ch ƒë∆∞·ª£c qu√©t:", data);
        
        // ‚úÖ FIX: Kh√¥ng c·∫ßn parse JSON, data ƒë√£ l√† object
        const rfidTag = data.rfidTag;
        const bookId = data.bookId; // ‚úÖ ƒê√£ l√† s·ªë, kh√¥ng c·∫ßn parse
        const userId = userCard.user.id;

        console.log("üìä Processing data:", {
          rfidTag,
          bookId,
          userId,
          bookTitle: data.title,
          bookAuthor: data.author
        });

        // G·ªçi API ƒë·ªÉ x·ª≠ l√Ω m∆∞·ª£n s√°ch
        const response = await fetch("http://localhost:3000/api/loans/book-scan", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            userId: userId,
            rfidTag: rfidTag, // ‚úÖ G·ª≠i rfidTag thay v√¨ bookId
          }),
        });

        const result = await response.json();

        if (response.ok) {
          console.log("‚úÖ K·∫øt qu·∫£ t·ª´ server:", result);

          // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch s√°ch ƒë√£ m∆∞·ª£n
          if (result.book) {
            setBorrowedBooks((prevBooks) => [...prevBooks, result.book]);
          }

          setMessage(result.message || "M∆∞·ª£n/tr·∫£ s√°ch th√†nh c√¥ng!");
        } else {
          console.error("‚ùå L·ªói response:", result);
          setMessage(result.message || "M∆∞·ª£n/tr·∫£ s√°ch th·∫•t b·∫°i!");
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi x·ª≠ l√Ω book_scanned:", error);
        setMessage("L·ªói khi g·ª≠i y√™u c·∫ßu m∆∞·ª£n/tr·∫£ s√°ch.");
      }
    };

    socket.on("book_scanned", handleBookScanned);

    return () => {
      socket.off("book_scanned", handleBookScanned);
    };
  }, [userCard?.user?.id]);

  // ‚úÖ DEBUG: Th√™m listener cho t·∫•t c·∫£ events
  useEffect(() => {
    const handleAllEvents = (eventName) => {
      return (data) => {
        console.log(`üîä Socket Event [${eventName}]:`, data);
      };
    };

    // Listen t·∫•t c·∫£ events ƒë·ªÉ debug
    socket.onAny(handleAllEvents);

    return () => {
      socket.offAny(handleAllEvents);
    };
  }, []);

  const handleCompleteBorrow = async () => {
    try {
      const response = await fetch("http://localhost:3000/api/borrow", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userCard,
          books: borrowedBooks,
        }),
      });

      if (response.ok) {
        alert("M∆∞·ª£n s√°ch th√†nh c√¥ng!");
        setUserCard(null);
        setBorrowedBooks([]);
        setMessage("");
      } else {
        alert("M∆∞·ª£n s√°ch th·∫•t b·∫°i!");
      }
    } catch (error) {
      console.error("L·ªói:", error);
      alert("C√≥ l·ªói x·∫£y ra khi m∆∞·ª£n s√°ch.");
    }
  };

  return (
    <div className="borrow-book">
      <h1>M∆∞·ª£n S√°ch</h1>
      
      {/* ‚úÖ Th√™m Socket Status */}
      <div className="socket-status">
        <p>Socket ID: {socket.id || "Disconnected"}</p>
        <p>Status: {socket.connected ? "üü¢ Connected" : "üî¥ Disconnected"}</p>
      </div>

      {message && <p className="message">{message}</p>}

      <div className="user-info">
        {userCard ? (
          <div>
            <h2>Th√¥ng tin ng∆∞·ªùi m∆∞·ª£n:</h2>
            <p>T√™n: {userCard.user?.name}</p>
            <p>Email: {userCard.user?.email}</p>
          </div>
        ) : (
          <p>Vui l√≤ng qu√©t th·∫ª ƒë·ªÉ b·∫Øt ƒë·∫ßu...</p>
        )}
      </div>

      <div className="borrowed-books">
        <h2>S√°ch ƒë√£ qu√©t:</h2>
        {borrowedBooks.length > 0 ? (
          <ul>
            {borrowedBooks.map((book, index) => (
              <li key={index}>
                {book.title} - {book.author}
              </li>
            ))}
          </ul>
        ) : (
          <p>Ch∆∞a c√≥ s√°ch n√†o ƒë∆∞·ª£c qu√©t.</p>
        )}
      </div>

      {borrowedBooks.length > 0 && (
        <button onClick={handleCompleteBorrow}>Ho√†n t·∫•t m∆∞·ª£n s√°ch</button>
      )}
    </div>
  );
};

export default BorrowBook;