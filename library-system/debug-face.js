// library-system/debug-face.js
// Script ƒë·ªÉ debug Face-API setup

const { sequelize } = require('./config/database');
const FaceData = require('./models/FaceData');
const User = require('./models/User');
const faceRecognitionService = require('./services/FaceRecognitionService');

async function debugFaceSetup() {
  try {
    console.log('üîç === DEBUGGING FACE-API SETUP ===');
    
    // 1. Ki·ªÉm tra database connection
    console.log('\n1. üìä Ki·ªÉm tra k·∫øt n·ªëi database...');
    await sequelize.authenticate();
    console.log('‚úÖ Database k·∫øt n·ªëi th√†nh c√¥ng');
    
    // 2. Ki·ªÉm tra table FaceData
    console.log('\n2. üóÉÔ∏è Ki·ªÉm tra table FaceData...');
    try {
      const tableExists = await sequelize.getQueryInterface().describeTable('FaceData');
      console.log('‚úÖ Table FaceData t·ªìn t·∫°i:', Object.keys(tableExists));
    } catch (error) {
      console.log('‚ùå Table FaceData KH√îNG t·ªìn t·∫°i!');
      console.log('üí° C·∫ßn ch·∫°y: npm run migrate ho·∫∑c t·∫°o table manually');
      console.log('SQL: CREATE TABLE FaceData ...');
      return;
    }
    
    // 3. Ki·ªÉm tra Face-API models
    console.log('\n3. ü§ñ Ki·ªÉm tra Face-API models...');
    const modelsLoaded = await faceRecognitionService.loadModels();
    if (modelsLoaded) {
      console.log('‚úÖ Face-API models t·∫£i th√†nh c√¥ng');
    } else {
      console.log('‚ùå Face-API models KH√îNG t·∫£i ƒë∆∞·ª£c');
      console.log('üí° Ki·ªÉm tra internet connection ho·∫∑c CDN');
      return;
    }
    
    // 4. Ki·ªÉm tra users trong database
    console.log('\n4. üë§ Ki·ªÉm tra users...');
    const users = await User.findAll({ limit: 5 });
    console.log(`‚úÖ T√¨m th·∫•y ${users.length} users:`, users.map(u => ({ id: u.id, name: u.name })));
    
    // 5. Ki·ªÉm tra FaceData records
    console.log('\n5. ü§≥ Ki·ªÉm tra FaceData records...');
    const faceDataRecords = await FaceData.findAll();
    console.log(`üìä T√¨m th·∫•y ${faceDataRecords.length} face data records`);
    
    if (faceDataRecords.length > 0) {
      faceDataRecords.forEach(record => {
        console.log(`- User ${record.userId}: ${record.description} (${record.createdAt})`);
      });
    }
    
    // 6. Test API endpoints
    console.log('\n6. üåê ƒê·ªÉ test API endpoints, ch·∫°y:');
    console.log('GET  http://localhost:5000/api/face/setup');
    console.log('GET  http://localhost:5000/api/face/status/1');
    console.log('POST http://localhost:5000/api/face/register/1 (v·ªõi file ·∫£nh)');
    
    console.log('\n‚úÖ === DEBUG HO√ÄN T·∫§T ===');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi debug:', error);
  } finally {
    await sequelize.close();
  }
}

// Ch·∫°y debug n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  debugFaceSetup();
}

module.exports = debugFaceSetup;