/**
 * X·ª≠ l√Ω c√°c tin nh·∫Øn MQTT
 */

const cardService = require('../services/cardService');
const bookService = require('../services/bookService');
const userService = require('../services/userService');
const { CARD_SCANNED, CARD_SCAN_ERROR, BOOK_SCANNED, BOOK_SCAN_ERROR } = require('../socket/events');

// L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i
const activeUsers = new Map(); // Map cardId -> userId
const activeScans = new Map(); // Map userId -> { scanType, timestamp }
let mqttClient = null; // ƒê·ªÉ g·ª≠i response v·ªÅ ESP32

/**
 * Set MQTT client ƒë·ªÉ g·ª≠i response
 * @param {object} client - MQTT client instance
 */
function setMqttClient(client) {
  mqttClient = client;
}

/**
 * X·ª≠ l√Ω qu√©t th·∫ª RFID
 * @param {string} message - Message JSON t·ª´ ESP32
 * @param {object} io - Socket.IO instance
 */
async function handleCardScan(message, io) {
  let cardId = '';
  
  try {
    // Parse JSON message t·ª´ ESP32
    const data = JSON.parse(message);
    cardId = data.uid;
    
    console.log(`üîç X·ª≠ l√Ω qu√©t th·∫ª v·ªõi UID: ${cardId}`);
    console.log(`üì± Data t·ª´ ESP32:`, data);
    
    // L·∫•y th√¥ng tin user t·ª´ cardId (S·ª¨A: d√πng userService thay v√¨ cardService)
    const { user, card } = await userService.getUserByCardId(cardId);
    
    console.log(`‚úÖ T√¨m th·∫•y user: ${user.name} (ID: ${user.id}, Email: ${user.email})`);
    
    // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng th·∫ª g·∫ßn nh·∫•t
    try {
      await cardService.updateCardLastUsed(cardId);
    } catch (updateError) {
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t lastUsed: ${updateError.message}`);
    }
    
    // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng ƒëang ho·∫°t ƒë·ªông
    activeUsers.set(cardId, user.id);
     
    // X√°c ƒë·ªãnh lo·∫°i qu√©t (check-in/check-out ho·∫∑c m∆∞·ª£n/tr·∫£ s√°ch)
    const scanType = user.role === 'member' ? 'loan' : 'attendance';
    
    // L∆∞u lo·∫°i qu√©t
    activeScans.set(user.id, { 
      scanType, 
      timestamp: Date.now(),
      cardId
    });
    
    // // T·∫°o response th√†nh c√¥ng ƒë·ªÉ g·ª≠i v·ªÅ ESP32
    // const response = {
    //   status: 'success',
    //   user: user.name,
    //   userId: user.id,
    //   action: 'check-in', // ho·∫∑c logic ph·ª©c t·∫°p h∆°n ƒë·ªÉ x√°c ƒë·ªãnh check-in/out
    //   scanType: scanType,
    //   message: 'User found successfully'
    // };
    
    // // G·ª≠i response v·ªÅ ESP32 qua MQTT
    // if (mqttClient) {
    //   mqttClient.publish('library/response', JSON.stringify(response));
    //   console.log(`üì§ ƒê√£ g·ª≠i response v·ªÅ ESP32:`, response);
    // } else {
    //   console.log(`‚ö†Ô∏è MQTT client ch∆∞a ƒë∆∞·ª£c set, kh√¥ng th·ªÉ g·ª≠i response v·ªÅ ESP32`);
    // }
    
    // G·ª≠i th√¥ng b√°o qua Socket.IO cho frontend
    io.emit(CARD_SCANNED, { 
      cardId,
      userId: user.id,
      userName: user.name,
      userRole: user.role,
      scanType
    });
    
    console.log(`‚úÖ Ng∆∞·ªùi d√πng ${user.name} (${user.id}) ƒë√£ qu√©t th·∫ª ${cardId} cho ${scanType}`);
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω qu√©t th·∫ª ${cardId}:`, error.message);
    
    // T·∫°o error response ƒë·ªÉ g·ª≠i v·ªÅ ESP32
    const errorResponse = {
      status: 'error',
      cardId: cardId,
      message: error.message.includes('Kh√¥ng t√¨m th·∫•y') || error.message.includes('not found') 
        ? 'User not found' 
        : 'System error'
    };
    
    // G·ª≠i error response v·ªÅ ESP32 qua MQTT
    if (mqttClient) {
      mqttClient.publish('library/response', JSON.stringify(errorResponse));
      console.log(`üì§ ƒê√£ g·ª≠i error response v·ªÅ ESP32:`, errorResponse);
    }
    
    // G·ª≠i error qua Socket.IO cho frontend
    io.emit(CARD_SCAN_ERROR, { 
      cardId: cardId,
      message: error.message 
    });
  }
}

/**
 * X·ª≠ l√Ω qu√©t s√°ch
 * @param {string} message - Message JSON t·ª´ ESP32
 * @param {object} io - Socket.IO instance
 */
async function handleBookScan(message, io) {
  let rfidTag = '';
  
  try {
    // Parse JSON message t·ª´ ESP32
    const data = JSON.parse(message);
    rfidTag = data.uid; // ƒê·ªëi v·ªõi s√°ch, uid ch√≠nh l√† RFID tag
    
    console.log(`üìö X·ª≠ l√Ω qu√©t s√°ch v·ªõi RFID: ${rfidTag}`);
    
    // L·∫•y th√¥ng tin s√°ch
    const book = await bookService.getBookByRfidTag(rfidTag);
    
    console.log(`‚úÖ T√¨m th·∫•y s√°ch: "${book.title}" (ID: ${book.id})`);
    
    // T·∫°o response th√†nh c√¥ng ƒë·ªÉ g·ª≠i v·ªÅ ESP32
    const response = {
      status: 'success',
      book: book.title,
      bookId: book.id,
      author: book.author,
      available: book.available,
      message: 'Book found successfully'
    };
    
    // G·ª≠i response v·ªÅ ESP32 qua MQTT
    if (mqttClient) {
      mqttClient.publish('library/response', JSON.stringify(response));
      console.log(`üì§ ƒê√£ g·ª≠i book response v·ªÅ ESP32:`, response);
    }
    
    // G·ª≠i th√¥ng b√°o qua Socket.IO cho frontend
    io.emit(BOOK_SCANNED, { 
      rfidTag,
      bookId: book.id,
      title: book.title,
      author: book.author,
      available: book.available
    });
    
    console.log(`‚úÖ S√°ch "${book.title}" (${book.id}) ƒë√£ ƒë∆∞·ª£c qu√©t v·ªõi RFID ${rfidTag}`);
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω qu√©t s√°ch ${rfidTag}:`, error.message);
    
    // T·∫°o error response ƒë·ªÉ g·ª≠i v·ªÅ ESP32
    const errorResponse = {
      status: 'error',
      rfidTag: rfidTag,
      message: error.message.includes('Kh√¥ng t√¨m th·∫•y') || error.message.includes('not found')
        ? 'Book not found'
        : 'System error'
    };
    
    // G·ª≠i error response v·ªÅ ESP32 qua MQTT
    if (mqttClient) {
      mqttClient.publish('library/response', JSON.stringify(errorResponse));
      console.log(`üì§ ƒê√£ g·ª≠i book error response v·ªÅ ESP32:`, errorResponse);
    }
    
    // G·ª≠i error qua Socket.IO cho frontend
    io.emit(BOOK_SCAN_ERROR, { 
      rfidTag: rfidTag,
      message: error.message 
    });
  }
}

/**
 * X√≥a th√¥ng tin ng∆∞·ªùi d√πng ƒëang ho·∫°t ƒë·ªông sau m·ªôt kho·∫£ng th·ªùi gian
 * @param {string} userId - ID c·ªßa ng∆∞·ªùi d√πng
 * @param {number} timeout - Th·ªùi gian timeout (ms)
 */
function clearActiveUserAfterTimeout(userId, timeout = 60000) {
  setTimeout(() => {
    const userScan = activeScans.get(userId);
    if (userScan) {
      activeScans.delete(userId);
      activeUsers.delete(userScan.cardId);
      console.log(`üßπ ƒê√£ x√≥a th√¥ng tin qu√©t c·ªßa ng∆∞·ªùi d√πng ${userId} sau ${timeout}ms`);
    }
  }, timeout);
}

/**
 * L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒëang ho·∫°t ƒë·ªông
 * @param {string} cardId - ID c·ªßa th·∫ª
 * @returns {number|null} User ID ho·∫∑c null
 */
function getActiveUser(cardId) {
  return activeUsers.get(cardId) || null;
}

/**
 * L·∫•y th√¥ng tin qu√©t ƒëang ho·∫°t ƒë·ªông
 * @param {number} userId - ID c·ªßa ng∆∞·ªùi d√πng
 * @returns {object|null} Th√¥ng tin qu√©t ho·∫∑c null
 */
function getActiveScan(userId) {
  return activeScans.get(userId) || null;
}

module.exports = {
  handleCardScan,
  handleBookScan,
  activeUsers,
  activeScans,
  clearActiveUserAfterTimeout,
  getActiveUser,
  getActiveScan,
  setMqttClient
};