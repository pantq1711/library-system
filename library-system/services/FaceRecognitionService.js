// library-system/services/FaceRecognitionService.js (Fixed)

const faceapi = require('face-api.js');
const canvas = require('canvas');
const { Canvas, Image, loadImage } = canvas;
const fs = require('fs-extra');
const path = require('path');
const User = require('../models/User');
const FaceData = require('../models/FaceData');
const Attendance = require('../models/Attendance');
const { Op } = require('sequelize');

// C·∫•u h√¨nh face-api.js s·ª≠ d·ª•ng canvas
faceapi.env.monkeyPatch({ Canvas, Image });

// ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
const UPLOADS_DIR = path.join(__dirname, '../public/uploads');
const TEMP_DIR = path.join(__dirname, '../temp-uploads');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
fs.ensureDirSync(UPLOADS_DIR);
fs.ensureDirSync(TEMP_DIR);
fs.ensureDirSync(path.join(UPLOADS_DIR, 'faces'));

// Ng∆∞·ª°ng so s√°nh khu√¥n m·∫∑t
const FACE_MATCH_THRESHOLD = 0.5;

class FaceRecognitionService {
  constructor() {
    this.modelsLoaded = false;
  }

  /**
   * T·∫£i models face-api t·ª´ local ho·∫∑c CDN
   */
  async loadModels() {
    try {
      if (this.modelsLoaded) {
        console.log('‚úÖ Models ƒë√£ ƒë∆∞·ª£c t·∫£i tr∆∞·ªõc ƒë√≥');
        return true;
      }

      console.log('üîÑ ƒêang t·∫£i Face-API models...');
      
      // Th·ª≠ t·∫£i t·ª´ local tr∆∞·ªõc
      const modelsPath = path.join(__dirname, '../models/face-api');
      
      try {
        // T·∫£i t·ª´ local n·∫øu c√≥
        if (fs.existsSync(modelsPath)) {
          console.log('üìÅ T·∫£i models t·ª´ local:', modelsPath);
          await faceapi.nets.ssdMobilenetv1.loadFromDisk(modelsPath);
          await faceapi.nets.faceLandmark68Net.loadFromDisk(modelsPath);
          await faceapi.nets.faceRecognitionNet.loadFromDisk(modelsPath);
        } else {
          // T·∫£i t·ª´ CDN
          console.log('üåê T·∫£i models t·ª´ CDN...');
          const MODELS_URI = 'https://justadudewhohacks.github.io/face-api.js/models';
          await faceapi.nets.ssdMobilenetv1.loadFromUri(MODELS_URI);
          await faceapi.nets.faceLandmark68Net.loadFromUri(MODELS_URI);
          await faceapi.nets.faceRecognitionNet.loadFromUri(MODELS_URI);
        }
      } catch (loadError) {
        console.warn('‚ö†Ô∏è L·ªói t·∫£i models, th·ª≠ CDN fallback:', loadError.message);
        // Fallback to CDN
        const MODELS_URI = 'https://justadudewhohacks.github.io/face-api.js/models';
        await faceapi.nets.ssdMobilenetv1.loadFromUri(MODELS_URI);
        await faceapi.nets.faceLandmark68Net.loadFromUri(MODELS_URI);
        await faceapi.nets.faceRecognitionNet.loadFromUri(MODELS_URI);
      }
      
      console.log('‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng c√°c models Face-API');
      this.modelsLoaded = true;
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i models Face-API:', error);
      return false;
    }
  }

  /**
   * Load image helper
   */
  async _loadImage(imagePath) {
    try {
      const imageBuffer = await fs.readFile(imagePath);
      const img = await loadImage(imageBuffer); // ‚úÖ ƒê√∫ng
      return img;
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i ·∫£nh: ${error.message}`);
    }
  }

  /**
   * Ph√°t hi·ªán khu√¥n m·∫∑t trong ·∫£nh
   */
  async detectFace(imagePath) {
    try {
      console.log('üîç ƒêang ph√°t hi·ªán khu√¥n m·∫∑t trong:', imagePath);
      
      if (!this.modelsLoaded) {
        console.log('üì¶ Models ch∆∞a t·∫£i, ƒëang t·∫£i...');
        const loaded = await this.loadModels();
        if (!loaded) {
          throw new Error('Kh√¥ng th·ªÉ t·∫£i models Face-API');
        }
      }

      // Ki·ªÉm tra file t·ªìn t·∫°i
      if (!fs.existsSync(imagePath)) {
        throw new Error(`File ·∫£nh kh√¥ng t·ªìn t·∫°i: ${imagePath}`);
      }

      // T·∫£i ·∫£nh
      const img = await this._loadImage(imagePath);
      console.log('üì∑ ƒê√£ t·∫£i ·∫£nh th√†nh c√¥ng, k√≠ch th∆∞·ªõc:', img.width, 'x', img.height);
      
      // Ph√°t hi·ªán khu√¥n m·∫∑t
      const detections = await faceapi.detectSingleFace(img)
        .withFaceLandmarks()
        .withFaceDescriptor();
      
      if (!detections) {
        console.log('‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t trong ·∫£nh');
        return {
          success: false,
          message: 'Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t trong ·∫£nh. Vui l√≤ng th·ª≠ ·∫£nh kh√°c v·ªõi khu√¥n m·∫∑t r√µ r√†ng h∆°n.'
        };
      }
      
      console.log('‚úÖ ƒê√£ ph√°t hi·ªán khu√¥n m·∫∑t th√†nh c√¥ng');
      console.log('üìä Face descriptor length:', detections.descriptor.length);
      
      return {
        success: true,
        detection: detections,
        descriptor: Array.from(detections.descriptor)
      };
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√°t hi·ªán khu√¥n m·∫∑t:', error);
      return {
        success: false,
        message: `L·ªói khi ph√°t hi·ªán khu√¥n m·∫∑t: ${error.message}`
      };
    }
  }

  /**
   * ƒêƒÉng k√Ω khu√¥n m·∫∑t cho ng∆∞·ªùi d√πng
   */
  async registerFace(userId, imagePath, description = 'D·ªØ li·ªáu khu√¥n m·∫∑t') {
    try {
      console.log('üìù ƒêang ƒëƒÉng k√Ω khu√¥n m·∫∑t cho user:', userId);
      
      // Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
      const user = await User.findByPk(userId);
      if (!user) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y user:', userId);
        return {
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
        };
      }

      console.log('üë§ T√¨m th·∫•y user:', user.name);

      // Ph√°t hi·ªán khu√¥n m·∫∑t
      const detectionResult = await this.detectFace(imagePath);
      if (!detectionResult.success) {
        return detectionResult;
      }

      console.log('üíæ ƒêang l∆∞u d·ªØ li·ªáu khu√¥n m·∫∑t v√†o database...');

      // L∆∞u ·∫£nh khu√¥n m·∫∑t v√†o th∆∞ m·ª•c uploads/faces
      const facesDir = path.join(UPLOADS_DIR, 'faces');
      const fileName = `face_${userId}_${Date.now()}${path.extname(imagePath)}`;
      const destPath = path.join(facesDir, fileName);
      await fs.copy(imagePath, destPath);

      console.log('üíæ ƒê√£ sao ch√©p ·∫£nh v√†o:', destPath);

      // T√¨m ho·∫∑c t·∫°o b·∫£n ghi d·ªØ li·ªáu khu√¥n m·∫∑t
      let faceData = await FaceData.findOne({
        where: { userId: userId }
      });
      
      // Chu·∫©n b·ªã descriptor array
      let descriptors = [];
      if (faceData) {
        console.log('üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu khu√¥n m·∫∑t hi·ªán c√≥');
        // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t, parse t·ª´ BLOB
        try {
          const existingData = faceData.faceEncoding.toString();
          if (existingData) {
            descriptors = JSON.parse(existingData);
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu khu√¥n m·∫∑t c≈©:', e);
          descriptors = [];
        }
        
        // Th√™m descriptor m·ªõi (ch·ªâ gi·ªØ 3 descriptor g·∫ßn nh·∫•t)
        descriptors.push(detectionResult.descriptor);
        if (descriptors.length > 3) {
          descriptors = descriptors.slice(-3);
        }
        
        // C·∫≠p nh·∫≠t b·∫£n ghi
        faceData.faceEncoding = Buffer.from(JSON.stringify(descriptors));
        faceData.description = description;
        faceData.updatedAt = new Date();
        await faceData.save();
        
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu khu√¥n m·∫∑t');
      } else {
        console.log('‚ûï T·∫°o m·ªõi d·ªØ li·ªáu khu√¥n m·∫∑t');
        // T·∫°o m·ªõi d·ªØ li·ªáu khu√¥n m·∫∑t
        descriptors = [detectionResult.descriptor];
        faceData = await FaceData.create({
          userId: userId,
          faceEncoding: Buffer.from(JSON.stringify(descriptors)),
          description: description
        });
        
        console.log('‚úÖ ƒê√£ t·∫°o m·ªõi d·ªØ li·ªáu khu√¥n m·∫∑t, ID:', faceData.id);
      }

      return {
        success: true,
        message: 'ƒêƒÉng k√Ω khu√¥n m·∫∑t th√†nh c√¥ng',
        totalFaces: descriptors.length,
        faceDataId: faceData.id
      };
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω khu√¥n m·∫∑t:', error);
      return {
        success: false,
        message: `L·ªói khi ƒëƒÉng k√Ω khu√¥n m·∫∑t: ${error.message}`
      };
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng k√Ω khu√¥n m·∫∑t
   */
  async getFaceRegistrationStatus(userId) {
    try {
      console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i khu√¥n m·∫∑t cho user:', userId);
      
      const faceData = await FaceData.findOne({
        where: { userId: userId }
      });
      
      if (faceData) {
        console.log('‚úÖ User ƒë√£ c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t');
        return {
          success: true,
          faceData: {
            id: faceData.id,
            description: faceData.description,
            createdAt: faceData.createdAt,
            updatedAt: faceData.updatedAt
          }
        };
      } else {
        console.log('‚ùå User ch∆∞a c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t');
        return {
          success: false,
          message: 'Ch∆∞a ƒëƒÉng k√Ω khu√¥n m·∫∑t'
        };
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i:', error);
      return {
        success: false,
        message: `L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: ${error.message}`
      };
    }
  }

  /**
   * Check-in b·∫±ng khu√¥n m·∫∑t
   */
  async checkIn(imagePath) {
    try {
      console.log('üèõÔ∏è ƒêang x·ª≠ l√Ω check-in b·∫±ng khu√¥n m·∫∑t');
      
      // Ph√°t hi·ªán khu√¥n m·∫∑t
      const detectionResult = await this.detectFace(imagePath);
      if (!detectionResult.success) {
        return detectionResult;
      }

      // So s√°nh v·ªõi d·ªØ li·ªáu ƒë√£ ƒëƒÉng k√Ω
      const matchResult = await this.compareFaces(detectionResult.descriptor);
      if (!matchResult.success) {
        return matchResult;
      }

      // T√¨m user
      const user = await User.findByPk(matchResult.userId);
      if (!user) {
        return {
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
        };
      }

      // Th·ª±c hi·ªán check-in
      const attendance = await Attendance.create({
        userId: user.id,
        checkInTime: new Date(),
        status: 'check-in',
        faceVerified: true,
        cardVerified: false
      });

      console.log('‚úÖ Check-in th√†nh c√¥ng cho user:', user.name);

      return {
        success: true,
        message: `Check-in th√†nh c√¥ng! Ch√†o m·ª´ng ${user.name}`,
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role
        },
        attendance: {
          id: attendance.id,
          checkInTime: attendance.checkInTime
        }
      };
    } catch (error) {
      console.error('‚ùå L·ªói khi check-in:', error);
      return {
        success: false,
        message: `L·ªói khi check-in: ${error.message}`
      };
    }
  }

  /**
   * So s√°nh khu√¥n m·∫∑t v·ªõi d·ªØ li·ªáu ƒë√£ ƒëƒÉng k√Ω
   */
  async compareFaces(faceDescriptor) {
    try {
      console.log('üîç ƒêang so s√°nh khu√¥n m·∫∑t v·ªõi database...');
      
      // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu khu√¥n m·∫∑t
      const allFaceData = await FaceData.findAll();
      
      if (allFaceData.length === 0) {
        return {
          success: false,
          message: 'Kh√¥ng c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t ƒë·ªÉ so s√°nh'
        };
      }
      
      console.log('üìä T√¨m th·∫•y', allFaceData.length, 'b·∫£n ghi khu√¥n m·∫∑t');
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu khu√¥n m·∫∑t cho vi·ªác so s√°nh
      const labeledDescriptors = [];
      
      for (const faceData of allFaceData) {
        try {
          const encodingString = faceData.faceEncoding.toString();
          const descriptors = JSON.parse(encodingString);
          
          if (descriptors && descriptors.length > 0) {
            const faceDescriptors = descriptors.map(d => new Float32Array(d));
            labeledDescriptors.push(
              new faceapi.LabeledFaceDescriptors(faceData.userId.toString(), faceDescriptors)
            );
          }
        } catch (e) {
          console.error(`‚ùå L·ªói parse d·ªØ li·ªáu khu√¥n m·∫∑t user ${faceData.userId}:`, e);
        }
      }
      
      if (labeledDescriptors.length === 0) {
        return {
          success: false,
          message: 'Kh√¥ng c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t h·ª£p l·ªá ƒë·ªÉ so s√°nh'
        };
      }
      
      console.log('üéØ So s√°nh v·ªõi', labeledDescriptors.length, 'khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω');
      
      // T·∫°o face matcher
      const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, FACE_MATCH_THRESHOLD);
      
      // So s√°nh
      const match = faceMatcher.findBestMatch(faceDescriptor);
      
      console.log('üìä K·∫øt qu·∫£ so s√°nh:', match.toString());
      
      if (match.label === 'unknown') {
        return {
          success: false,
          message: 'Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t'
        };
      }
      
      return {
        success: true,
        userId: parseInt(match.label),
        distance: match.distance,
        confidence: Math.round((1 - match.distance) * 100)
      };
    } catch (error) {
      console.error('‚ùå L·ªói khi so s√°nh khu√¥n m·∫∑t:', error);
      return {
        success: false,
        message: `L·ªói khi so s√°nh khu√¥n m·∫∑t: ${error.message}`
      };
    }
  }
}

module.exports = new FaceRecognitionService();